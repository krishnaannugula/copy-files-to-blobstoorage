# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master



stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(VMIMAGENAME)
    steps:
      - checkout: self
        clean: true
      - task: CopyFiles@2
        displayName: copy files from
        inputs:
          SourceFolder: 'source'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
    
    #####Release######

- stage: DeployStaging
  displayName: Deploy Staging
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: Staging
    pool:
      vmImage: $(VMIMAGENAME)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFileCopy@3
            displayName: 'AzureBlob File Copy'
            inputs:
              SourcePath: '$(Pipeline.Workspace)/drop'
              azureSubscription: 'azconnection'
              Destination: 'AzureBlob'
              storage: '$(STAGINGSTORAGE)'
              ContainerName: 'input'
              sasTokenTimeOutInMinutes: '240'


          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                              
                $messageCardBody=@"
                { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://cdn2.iconfinder.com/data/icons/weby-flat-vol-1/512/1_Approved-check-checkbox-confirm-green-success-tick-512.png", "activityTitle": "Notification", "activitySubtitle": "Copy Files", "facts": [ { "name": "EnvName:", "value": "$(Environment.Name)" }, { "name": "ApplicationName:", "value": "${env:STAGINGSTORAGE}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "$(Agent.JobStatus)" } ], "text": "Deployment to $(Environment.Name)", "potentialAction": [  ] } ] }
                "@
                echo ${messageCardBody}
                echo ${env:STAGINGSTORAGE}

                Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’     



            #####production Release required approval######

- stage: DeployProduction
  displayName: Deploy Production
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: ProductionDeploy
    pool:
      vmImage: $(VMIMAGENAME)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFileCopy@3
            displayName: 'AzureBlob File Copy'
            inputs:
              SourcePath: '$(Pipeline.Workspace)/drop'
              azureSubscription: 'azconnection'
              Destination: 'AzureBlob'
              storage: $(PRODUCTIONSTORAGE)
              ContainerName: 'input'
              sasTokenTimeOutInMinutes: '240'



          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                
               
                $messageCardBody=@"
                { "@type": "MessageCard", "@context": "https://schema.org/extensions", "summary": "1 new build message", "themeColor": "0078D7", "sections": [ { "activityImage": "https://cdn2.iconfinder.com/data/icons/weby-flat-vol-1/512/1_Approved-check-checkbox-confirm-green-success-tick-512.png", "activityTitle": "Notification", "activitySubtitle": "Copy Files", "facts": [ { "name": "EnvName:", "value": "$(Environment.Name)" }, { "name": "ApplicationName:", "value": "${env:PRODUCTIONSTORAGE}" },{ "name": "BuildNumber:", "value": "$(Build.BuildNumber)" },{ "name": "BuildStatus:", "value": "$(Agent.JobStatus)" }], "text": "Deployment to $(Environment.Name)", "potentialAction": [  ] } ] }
                "@
                echo ${messageCardBody}
                echo ${env:PRODUCTIONSTORAGE}

                Invoke-RestMethod -uri ${env:WEBHOOKURL} -Method Post -body $messageCardBody -ContentType ‘application/json’         